{"ast":null,"code":"/**\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used to determine if values are of the language type `Object`. */\nvar objectTypes = {\n  'function': true,\n  'object': true\n};\n\n/** Detect free variable `exports`. */\nvar freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : undefined;\n\n/** Detect free variable `module`. */\nvar freeModule = objectTypes[typeof module] && module && !module.nodeType ? module : undefined;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);\n\n/** Detect free variable `self`. */\nvar freeSelf = checkGlobal(objectTypes[typeof self] && self);\n\n/** Detect free variable `window`. */\nvar freeWindow = checkGlobal(objectTypes[typeof window] && window);\n\n/** Detect `this` as the global object. */\nvar thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n\n/**\n * Used as a reference to the global object.\n *\n * The `this` value is used if it's the global object to avoid Greasemonkey's\n * restricted `window` object, otherwise the `window` object is used.\n */\nvar root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function('return this')();\n\n/**\n * Checks if `value` is a global object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {null|Object} Returns `value` if it's a global object, else `null`.\n */\nfunction checkGlobal(value) {\n  return value && value.Object === Object ? value : null;\n}\nmodule.exports = root;","map":{"version":3,"names":["objectTypes","freeExports","exports","nodeType","undefined","freeModule","module","freeGlobal","checkGlobal","global","freeSelf","self","freeWindow","window","thisGlobal","root","Function","value","Object"],"sources":["/Users/sophialuo/node_modules/lodash._root/index.js"],"sourcesContent":["/**\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used to determine if values are of the language type `Object`. */\nvar objectTypes = {\n  'function': true,\n  'object': true\n};\n\n/** Detect free variable `exports`. */\nvar freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)\n  ? exports\n  : undefined;\n\n/** Detect free variable `module`. */\nvar freeModule = (objectTypes[typeof module] && module && !module.nodeType)\n  ? module\n  : undefined;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);\n\n/** Detect free variable `self`. */\nvar freeSelf = checkGlobal(objectTypes[typeof self] && self);\n\n/** Detect free variable `window`. */\nvar freeWindow = checkGlobal(objectTypes[typeof window] && window);\n\n/** Detect `this` as the global object. */\nvar thisGlobal = checkGlobal(objectTypes[typeof this] && this);\n\n/**\n * Used as a reference to the global object.\n *\n * The `this` value is used if it's the global object to avoid Greasemonkey's\n * restricted `window` object, otherwise the `window` object is used.\n */\nvar root = freeGlobal ||\n  ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||\n    freeSelf || thisGlobal || Function('return this')();\n\n/**\n * Checks if `value` is a global object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {null|Object} Returns `value` if it's a global object, else `null`.\n */\nfunction checkGlobal(value) {\n  return (value && value.Object === Object) ? value : null;\n}\n\nmodule.exports = root;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAIA,WAAW,GAAG;EAChB,UAAU,EAAE,IAAI;EAChB,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA,IAAIC,WAAW,GAAID,WAAW,CAAC,OAAOE,OAAO,CAAC,IAAIA,OAAO,IAAI,CAACA,OAAO,CAACC,QAAQ,GAC1ED,OAAO,GACPE,SAAS;;AAEb;AACA,IAAIC,UAAU,GAAIL,WAAW,CAAC,OAAOM,MAAM,CAAC,IAAIA,MAAM,IAAI,CAACA,MAAM,CAACH,QAAQ,GACtEG,MAAM,GACNF,SAAS;;AAEb;AACA,IAAIG,UAAU,GAAGC,WAAW,CAACP,WAAW,IAAII,UAAU,IAAI,OAAOI,MAAM,IAAI,QAAQ,IAAIA,MAAM,CAAC;;AAE9F;AACA,IAAIC,QAAQ,GAAGF,WAAW,CAACR,WAAW,CAAC,OAAOW,IAAI,CAAC,IAAIA,IAAI,CAAC;;AAE5D;AACA,IAAIC,UAAU,GAAGJ,WAAW,CAACR,WAAW,CAAC,OAAOa,MAAM,CAAC,IAAIA,MAAM,CAAC;;AAElE;AACA,IAAIC,UAAU,GAAGN,WAAW,CAACR,WAAW,CAAC,OAAO,IAAI,CAAC,IAAI,IAAI,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA,IAAIe,IAAI,GAAGR,UAAU,IACjBK,UAAU,MAAME,UAAU,IAAIA,UAAU,CAACD,MAAM,CAAC,IAAKD,UAAW,IAChEF,QAAQ,IAAII,UAAU,IAAIE,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASR,WAAWA,CAACS,KAAK,EAAE;EAC1B,OAAQA,KAAK,IAAIA,KAAK,CAACC,MAAM,KAAKA,MAAM,GAAID,KAAK,GAAG,IAAI;AAC1D;AAEAX,MAAM,CAACJ,OAAO,GAAGa,IAAI","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}